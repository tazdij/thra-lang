program helloworld;

/* 
    Delphi or Pascal Inspired Language infused with goodness 
    which compiles to plain C89 or C99 not sure yet. Important
    that it will also compile to LLVM IL too
    
    Case-Sensitive
    Not OOP (at the moment)
    Native UTF-8 String type.



    TEMPLATES and Specialization
*/


/*
        Functions can be declared prior to their definition
	this however is only possible in Units and not in the
	Program file.
	
	It looks something like this:
	
	    func proc_name(arg1 : String);
	
	We want to also be able to define External functions.

            func internal_name(arg1 : Int32) : Int32; cdecl; extern 'external_name';
	
*/

/*
	Pointers & Low level memory access
	A Raw Pointer works just like in C and Pascal.
	
	    var my_user_ptr : ^User;
	
	Now Pointers to Functions are also similar to C and Pascal
	
	    var my_callback_ptr : func(Int32; String) : Bool;
	
	In the Future Fat Pointers to Methods (when/if OOP is added)
*/

/*
	Allocation
	
	There are a few simple Allocations. First recognizing there are
	only 2 main locations for allocation. The HEAP and the STACK. However
	in some situations we can consider using a Buffer in the Program's
	Data Segment (ASM, or C Global Variable) for much faster access,
	if needed.
	
	Allocation of memory on the Heap is similar to C, with simpler syntax.
        In the following example, users is a Pointer to Heap allocated memory
        which holds 5 Contiguous User Records.
		
	    var users : ^[]User;
	    alloc(users, 5);

        Stack Allocated Array

            var entities : [10]Entity;

        This is automatically allocated to the stack, in the current frame if
        declared in a function. If this is in a Recird, the elements will be
        directly in the Record

            type Cluster : Record (
                elements : [10]Element;
            );


*/

type User : Record (
    first_name : ^String;
    last_name : ^String;
);

type Account : Record (
    owner : User;  // Garrantees the entire User record at position in this record
    // ^myaccount can be safely cast and used User(@myaccount)^.
);


/* Templated Types? */
type Vector<SIZE_T : Uint8, TYPE_T : Type> : Record (
    el : [SIZE_T]TYPE_T;
);

func proc_name(arg1 : String) {
    var tmp_vec : Vector<3, Float32>; // Stored local in stack-frame

    // A Pointer to a Vector<3, Float32> which needs to to still be allocated or
    // set to point an existing value in the heap. There is also a special
    // "Buffered" storage space.
    var player_pos : ^Vector<3, Float32>;
};


/*
    [@...]
    this is a meta programming decorator and is executed during compilation,
    and should do any needed setup, code manipulation, or generation needed
    to make the function act as expected (this can even include RTTI additions)
*/
[@protocom.rpc()] 
func func_name(arg1 : String; arg2 : Int32) : String {
    var my_var : String := "",
        int_var : Int32 := 0;

    func sub_func_name() {
            /*
                this is a sub procedure which is not exactly a closure and doesn't capture
		the variables of the parent, however, it does allow access to them in the
		parent's stack frame.

		Sub procedures are recursive, meaning we will need to track the location of
		the parent procedure stackframe
	    */
            var my_local_var : Bool = FALSE;
    };
    
    // Loops
    for (var i : Int32 := 0; i < 100; #inc(i)) {
        /*
            #func is a compiler defined function
            Almost like meta programming but reserved similar to operators
            however they are called as functions for now.
        
            in the future it might be worth having in-fix usage
            i.e. int_var := 10 #mod 2;
        */
    };
    
    while (intvar = 0) {
    
    };
};




/* Any */
